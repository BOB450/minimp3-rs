/* automatically generated by rust-bindgen 0.56.0 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const MINIMP3_MAX_SAMPLES_PER_FRAME: u32 = 2304;
pub const MP3D_SEEK_TO_BYTE: u32 = 0;
pub const MP3D_SEEK_TO_SAMPLE: u32 = 1;
pub const MP3D_DO_NOT_SCAN: u32 = 2;
pub const MP3D_FLAGS_MASK: u32 = 3;
pub const MINIMP3_PREDECODE_FRAMES: u32 = 2;
pub const MINIMP3_IO_SIZE: u32 = 131072;
pub const MINIMP3_BUF_SIZE: u32 = 16384;
pub const MINIMP3_ENABLE_RING: u32 = 0;
pub const MP3D_E_PARAM: i32 = -1;
pub const MP3D_E_MEMORY: i32 = -2;
pub const MP3D_E_IOERROR: i32 = -3;
pub const MP3D_E_USER: i32 = -4;
pub const MP3D_E_DECODE: i32 = -5;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mp3dec_frame_info_t {
    pub frame_bytes: ::std::os::raw::c_int,
    pub frame_offset: ::std::os::raw::c_int,
    pub channels: ::std::os::raw::c_int,
    pub hz: ::std::os::raw::c_int,
    pub layer: ::std::os::raw::c_int,
    pub bitrate_kbps: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mp3dec_frame_info_t() {
    assert_eq!(
        ::std::mem::size_of::<mp3dec_frame_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(mp3dec_frame_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mp3dec_frame_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mp3dec_frame_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_frame_info_t>())).frame_bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(frame_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mp3dec_frame_info_t>())).frame_offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(frame_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_frame_info_t>())).channels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_frame_info_t>())).hz as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(hz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_frame_info_t>())).layer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mp3dec_frame_info_t>())).bitrate_kbps as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(bitrate_kbps)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mp3dec_t {
    pub mdct_overlap: [[f32; 288usize]; 2usize],
    pub qmf_state: [f32; 960usize],
    pub reserv: ::std::os::raw::c_int,
    pub free_format_bytes: ::std::os::raw::c_int,
    pub header: [::std::os::raw::c_uchar; 4usize],
    pub reserv_buf: [::std::os::raw::c_uchar; 511usize],
}
#[test]
fn bindgen_test_layout_mp3dec_t() {
    assert_eq!(
        ::std::mem::size_of::<mp3dec_t>(),
        6668usize,
        concat!("Size of: ", stringify!(mp3dec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mp3dec_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mp3dec_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_t>())).mdct_overlap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(mdct_overlap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_t>())).qmf_state as *const _ as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(qmf_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_t>())).reserv as *const _ as usize },
        6144usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(reserv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_t>())).free_format_bytes as *const _ as usize },
        6148usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(free_format_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_t>())).header as *const _ as usize },
        6152usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_t>())).reserv_buf as *const _ as usize },
        6156usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(reserv_buf)
        )
    );
}
extern "C" {
    pub fn mp3dec_init(dec: *mut mp3dec_t);
}
pub type mp3d_sample_t = i16;
extern "C" {
    pub fn mp3dec_decode_frame(
        dec: *mut mp3dec_t,
        mp3: *const u8,
        mp3_bytes: ::std::os::raw::c_int,
        pcm: *mut mp3d_sample_t,
        info: *mut mp3dec_frame_info_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mp3dec_file_info_t {
    pub buffer: *mut mp3d_sample_t,
    pub samples: size_t,
    pub channels: ::std::os::raw::c_int,
    pub hz: ::std::os::raw::c_int,
    pub layer: ::std::os::raw::c_int,
    pub avg_bitrate_kbps: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mp3dec_file_info_t() {
    assert_eq!(
        ::std::mem::size_of::<mp3dec_file_info_t>(),
        32usize,
        concat!("Size of: ", stringify!(mp3dec_file_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mp3dec_file_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_file_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_file_info_t>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_file_info_t>())).samples as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_file_info_t>())).channels as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_file_info_t>())).hz as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(hz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_file_info_t>())).layer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mp3dec_file_info_t>())).avg_bitrate_kbps as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(avg_bitrate_kbps)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mp3dec_map_info_t {
    pub buffer: *const u8,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_mp3dec_map_info_t() {
    assert_eq!(
        ::std::mem::size_of::<mp3dec_map_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(mp3dec_map_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mp3dec_map_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_map_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_map_info_t>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_map_info_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_map_info_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_map_info_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mp3dec_frame_t {
    pub sample: u64,
    pub offset: u64,
}
#[test]
fn bindgen_test_layout_mp3dec_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<mp3dec_frame_t>(),
        16usize,
        concat!("Size of: ", stringify!(mp3dec_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mp3dec_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_frame_t>())).sample as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_t),
            "::",
            stringify!(sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_frame_t>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_t),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mp3dec_index_t {
    pub frames: *mut mp3dec_frame_t,
    pub num_frames: size_t,
    pub capacity: size_t,
}
#[test]
fn bindgen_test_layout_mp3dec_index_t() {
    assert_eq!(
        ::std::mem::size_of::<mp3dec_index_t>(),
        24usize,
        concat!("Size of: ", stringify!(mp3dec_index_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mp3dec_index_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_index_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_index_t>())).frames as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_index_t),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_index_t>())).num_frames as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_index_t),
            "::",
            stringify!(num_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_index_t>())).capacity as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_index_t),
            "::",
            stringify!(capacity)
        )
    );
}
pub type MP3D_READ_CB = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut ::std::os::raw::c_void,
        size: size_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> size_t,
>;
pub type MP3D_SEEK_CB = ::std::option::Option<
    unsafe extern "C" fn(
        position: u64,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mp3dec_io_t {
    pub read: MP3D_READ_CB,
    pub read_data: *mut ::std::os::raw::c_void,
    pub seek: MP3D_SEEK_CB,
    pub seek_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mp3dec_io_t() {
    assert_eq!(
        ::std::mem::size_of::<mp3dec_io_t>(),
        32usize,
        concat!("Size of: ", stringify!(mp3dec_io_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mp3dec_io_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_io_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_io_t>())).read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_io_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_io_t>())).read_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_io_t),
            "::",
            stringify!(read_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_io_t>())).seek as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_io_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_io_t>())).seek_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_io_t),
            "::",
            stringify!(seek_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mp3dec_ex_t {
    pub mp3d: mp3dec_t,
    pub file: mp3dec_map_info_t,
    pub io: *mut mp3dec_io_t,
    pub index: mp3dec_index_t,
    pub offset: u64,
    pub samples: u64,
    pub detected_samples: u64,
    pub cur_sample: u64,
    pub start_offset: u64,
    pub end_offset: u64,
    pub info: mp3dec_frame_info_t,
    pub buffer: [mp3d_sample_t; 2304usize],
    pub input_consumed: size_t,
    pub input_filled: size_t,
    pub is_file: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub vbr_tag_found: ::std::os::raw::c_int,
    pub indexes_built: ::std::os::raw::c_int,
    pub free_format_bytes: ::std::os::raw::c_int,
    pub buffer_samples: ::std::os::raw::c_int,
    pub buffer_consumed: ::std::os::raw::c_int,
    pub to_skip: ::std::os::raw::c_int,
    pub start_delay: ::std::os::raw::c_int,
    pub last_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mp3dec_ex_t() {
    assert_eq!(
        ::std::mem::size_of::<mp3dec_ex_t>(),
        11456usize,
        concat!("Size of: ", stringify!(mp3dec_ex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mp3dec_ex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_ex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).mp3d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(mp3d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).file as *const _ as usize },
        6672usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).io as *const _ as usize },
        6688usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(io)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).index as *const _ as usize },
        6696usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).offset as *const _ as usize },
        6720usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).samples as *const _ as usize },
        6728usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).detected_samples as *const _ as usize },
        6736usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(detected_samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).cur_sample as *const _ as usize },
        6744usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(cur_sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).start_offset as *const _ as usize },
        6752usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(start_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).end_offset as *const _ as usize },
        6760usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(end_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).info as *const _ as usize },
        6768usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).buffer as *const _ as usize },
        6792usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).input_consumed as *const _ as usize },
        11400usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(input_consumed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).input_filled as *const _ as usize },
        11408usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(input_filled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).is_file as *const _ as usize },
        11416usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(is_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).flags as *const _ as usize },
        11420usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).vbr_tag_found as *const _ as usize },
        11424usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(vbr_tag_found)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).indexes_built as *const _ as usize },
        11428usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(indexes_built)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).free_format_bytes as *const _ as usize },
        11432usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(free_format_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).buffer_samples as *const _ as usize },
        11436usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(buffer_samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).buffer_consumed as *const _ as usize },
        11440usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(buffer_consumed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).to_skip as *const _ as usize },
        11444usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(to_skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).start_delay as *const _ as usize },
        11448usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(start_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3dec_ex_t>())).last_error as *const _ as usize },
        11452usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(last_error)
        )
    );
}
pub type MP3D_ITERATE_CB = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        frame: *const u8,
        frame_size: ::std::os::raw::c_int,
        free_format_bytes: ::std::os::raw::c_int,
        buf_size: size_t,
        offset: u64,
        info: *mut mp3dec_frame_info_t,
    ) -> ::std::os::raw::c_int,
>;
pub type MP3D_PROGRESS_CB = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        file_size: size_t,
        offset: u64,
        info: *mut mp3dec_frame_info_t,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn mp3dec_detect_buf(buf: *const u8, buf_size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_detect_cb(
        io: *mut mp3dec_io_t,
        buf: *mut u8,
        buf_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_load_buf(
        dec: *mut mp3dec_t,
        buf: *const u8,
        buf_size: size_t,
        info: *mut mp3dec_file_info_t,
        progress_cb: MP3D_PROGRESS_CB,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_load_cb(
        dec: *mut mp3dec_t,
        io: *mut mp3dec_io_t,
        buf: *mut u8,
        buf_size: size_t,
        info: *mut mp3dec_file_info_t,
        progress_cb: MP3D_PROGRESS_CB,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_iterate_buf(
        buf: *const u8,
        buf_size: size_t,
        callback: MP3D_ITERATE_CB,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_iterate_cb(
        io: *mut mp3dec_io_t,
        buf: *mut u8,
        buf_size: size_t,
        callback: MP3D_ITERATE_CB,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_ex_open_buf(
        dec: *mut mp3dec_ex_t,
        buf: *const u8,
        buf_size: size_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_ex_open_cb(
        dec: *mut mp3dec_ex_t,
        io: *mut mp3dec_io_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_ex_close(dec: *mut mp3dec_ex_t);
}
extern "C" {
    pub fn mp3dec_ex_seek(dec: *mut mp3dec_ex_t, position: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_ex_read_frame(
        dec: *mut mp3dec_ex_t,
        buf: *mut *mut mp3d_sample_t,
        frame_info: *mut mp3dec_frame_info_t,
        max_samples: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn mp3dec_ex_read(
        dec: *mut mp3dec_ex_t,
        buf: *mut mp3d_sample_t,
        samples: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn mp3dec_detect(file_name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_load(
        dec: *mut mp3dec_t,
        file_name: *const ::std::os::raw::c_char,
        info: *mut mp3dec_file_info_t,
        progress_cb: MP3D_PROGRESS_CB,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_iterate(
        file_name: *const ::std::os::raw::c_char,
        callback: MP3D_ITERATE_CB,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp3dec_ex_open(
        dec: *mut mp3dec_ex_t,
        file_name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
